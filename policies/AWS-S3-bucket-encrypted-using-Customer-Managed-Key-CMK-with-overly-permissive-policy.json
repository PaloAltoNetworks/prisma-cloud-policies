{
  "policyUpi": " PC-AWS-S3-1081",
  "policyId": "89ef8838-136a-405c-8a72-0edfadcdeadc",
  "policyType": "config",
  "cloudType": "aws",
  "severity": "medium",
  "name": "AWS S3 bucket encrypted using Customer Managed Key (CMK) with overly permissive policy",
  "description": "Overly permissive key policies on AWS S3 buckets encrypted with Customer Managed Keys (CMKs) allow unauthorized access to sensitive data, leading to data breaches and compliance violations.\n\nAWS S3 utilizes Customer Managed Keys (CMKs) for encryption, stored and managed within AWS Key Management Service (KMS). A misconfigured KMS key policy granting excessive permissions to untrusted principals, exposes the encryption key. Attackers exploiting this misconfiguration can decrypt and access sensitive data stored in the S3 bucket.\n\nThe impact of this misconfiguration includes data breaches, financial losses, reputational damage, and regulatory penalties for non-compliance. Restricting permissions to only necessary principals minimizes the potential impact of a compromised key. Following the principle of least privilege ensures only authorized entities can access the encryption key.\n\nMitigate this risk by implementing least privilege access controls on the KMS key policy. Grant required permissions only to trusted entities and services requiring access. Regularly review and audit the KMS key policy to identify and remove unnecessary permissions. Use a strong, unique CMK for each S3 bucket, and avoid using wildcard characters in the KMS key policy.",
  "rule.criteria": "1236bf26-18d5-4393-885d-e828115f5836",
  "searchModel.query": "config from cloud.resource where cloud.type = 'aws' AND api.name= 'aws-s3api-get-bucket-acl' AND json.rule = (sseAlgorithm contains \"aws:kms\" or sseAlgorithm contains \"aws:kms:dsse\") and kmsMasterKeyID exists as X; config from cloud.resource where api.name = 'aws-kms-get-key-rotation-status' AND json.rule = keyMetadata.keyState equals Enabled and keyMetadata.keyManager equals CUSTOMER and policies.default.Statement[?any((Principal.AWS equals * or Principal equals *)and Condition does not exist)] exists as Y; filter '$.X.kmsMasterKeyID contains $.Y.key.keyArn' ; show X;",
  "recommendation": "The following steps are recommended to add changes to existing key policy of the KMS key used by the S3 bucket\n1. Log in to the AWS Console and navigate to the 'S3' service.\n2. Click on the S3 bucket reported in the alert.\n3. Click on the 'Properties' tab.\n4. Under the 'Default encryption' section, click on the KMS key link in 'Encryption key ARN'.\n5. Click on the 'Key policy' tab on the navigated KMS key window.\n6. Click on 'Edit'.\n7. Replace the 'Everyone' grantee (i.e. '*') from the Principal element value with an AWS account ID or an AWS account ARN.\n OR \nAdd a Condition clause to the existing policy statement so that the KMS key is restricted.\n8. Click on 'Save Changes'.",
  "remediable": false,
  "remediation.cliScriptTemplate": "",
  "remediation.description": "",
  "remediation.impact": "",
  "compliance.standard": [
    "ACSC Information Security Manual (ISM) (Latest)",
    "CSA CCM v4.0.12",
    "Cloud Security Assurance Program (CSAP) - IaaS",
    "Cloud Security Assurance Program (CSAP) - Low",
    "Cloud Security Assurance Program (CSAP) - Low SaaS",
    "Cloud Security Assurance Program (CSAP) - SaaS Simplified",
    "DORA",
    "HIPAA",
    "HITRUST CSF v.11.2.0",
    "ISO/IEC 27001:2022",
    "Korea â€“ Information Security Management System (ISMS)",
    "Microsoft Cloud Security Benchmark v1",
    "NCSC - Cyber Essentials",
    "NIST 800-53 Rev 5",
    "NIST CSF v2.0",
    "NIST SP 800-171 Revision 3",
    "NYDFS 23 CRR-NY 500.0",
    "PCI DSS v4.0.1",
    "SOC 2",
    "Secure Controls Framework (SCF) - 2024.2",
    "TX-RAMP Level 1",
    "Telecommunications Security Act - TSA",
    "Trusted Information Security Assessment Exchange (TISAX)"
  ]
}